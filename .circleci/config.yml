defaults: &defaults
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      CODECOV_TOKEN: b0d35139-0a75-427a-907b-2c78a762f8f0
      VERSION: 1.7.0
      PANDOC_RELEASES_URL: https://github.com/jgm/pandoc/releases
    steps:
    - checkout
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v1-dep-
    - restore_cache:
        name: Restore Yarn Package Cache
        keys:
          - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Install Dependencies
        command: |
          yarn install --frozen-lockfile
    - save_cache:
        name: Save Yarn Package Cache
        key: yarn-packages-{{ checksum "yarn.lock" }}
        paths:
          - ~/.cache/yarn
    - run:
        name: Lint & Format JS Code
        command: |
          yarn run lint
          yarn run format
    - run:
        name: Check for JS Formatting Diffs
        command: |
          git diff --name-status
          git diff-files --quiet || (echo 'The files above have not been formatted!' && (exit 1))
    - run:
        name: Run JS Tests & Coverage
        command: |
          export TZ=America/New_York
          yarn run test-with-coverage --maxWorkers=50%
          bash <(curl -s https://codecov.io/bash) -c -F javascript -f ./JS_coverage/lcov.info
          yarn run report-duplicate-code
          cp -r ./JS_coverage /tmp/circleci-test-results
    - run:
        name: Build JS
        command: |
          yarn run build
    - run:
        name: Install Latest pandoc
        command: |
          # the 'latest' URL redirects to the name of the latest tag.
          export PANDOCVERSION=$(curl -I "$PANDOC_RELEASES_URL/latest" | sed -ne 's#Location:.*tag/\(.*\)$#\1#p' | tr -d "\n\r")
          echo $PANDOCVERSION # Show pandoc version in logs
          export PANDOC_FILE=pandoc-$PANDOCVERSION-1-amd64.deb
          echo $PANDOC_FILE
          wget $PANDOC_RELEASES_URL/download/$PANDOCVERSION/$PANDOC_FILE
          sudo dpkg -i $PANDOC_FILE
          rm $PANDOC_FILE
    - run:
       name: Create and activate virtualenv
       command: |
         virtualenv ci
         . ci/bin/activate
         pip install six
         pip install lxml
         pip install flake8
         pip install isort
         pip install -r docs/source/requirements.txt
         python setup.py develop
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        - ~/ci
    - run:
        name: Run Flake8
        command: |
          . ci/bin/activate
          flake8
    - run:
        name: Run isort
        command: |
          . ci/bin/activate
          isort --recursive -c -vb setup.py dtale tests
    # Test
    - run:
       name: Run all tests
       command: |
         set -e
         . ci/bin/activate
         export TZ=America/New_York
         python setup.py test
         bash <(curl -s https://codecov.io/bash) -c -F python
         cp -r ./htmlcov /tmp/circleci-test-results
         python setup.py build_sphinx
         cp -r ./build /tmp/circleci-artifacts
    # Build egg
    - run:
        name: Build egg
        command: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            set -e
            . ci/bin/activate
            pip install pypandoc
            pip install docutils
            pip install Pygments
            grep version setup.py | grep -q $VERSION || (echo "ERROR: Version number not found in setup.py: $VERSION"; exit 1)
            grep -q $VERSION CHANGES.md || (echo "ERROR: Version number not found in CHANGES.md: $VERSION"; exit 1)
            grep -q $VERSION docker/2_7/Dockerfile || (echo "ERROR: Version number not found in docker/2_7/Dockerfile: $VERSION"; exit 1)
            grep -q $VERSION docker/3_6/Dockerfile || (echo "ERROR: Version number not found in docker/3_6/Dockerfile: $VERSION"; exit 1)
            grep -q $VERSION docs/source/conf.py || (echo "ERROR: Version number not found in docs/source/conf.py: $VERSION"; exit 1)
            grep -q $VERSION package.json || (echo "ERROR: Version number not found in package.json: $VERSION"; exit 1)
            python setup.py --long-description > ../README.rst
            # pandoc --from=markdown --to=rst --output=../README.rst README.md
            cat ../README.rst | rst2html.py 1> ../README.html 2> ../log
            cp ../README.rst /tmp/circleci-artifacts
            cp ../log /tmp/circleci-artifacts
            if [ -s ../log ] ; then
              exit 1
            fi # rst2html.py alwaysexits with 0, check log size
            python setup.py bdist_wheel --universal
            python setup.py bdist_egg
            python setup.py sdist
            cp -r ./dist /tmp/circleci-artifacts
          fi
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
version: 2
jobs:
  build_2_7:
    working_directory: ~/man-group/dtale_2_7
    docker:
    - image: circleci/python:2.7-stretch-node-browsers
    <<: *defaults
  build_3:
    working_directory: ~/man-group/dtale_3
    docker:
    - image: circleci/python:3.6-stretch-node-browsers
    <<: *defaults
workflows:
  version: 2
  build_all:
    jobs:
      - build_2_7
      - build_3